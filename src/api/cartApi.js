import http from './http' // S·ª≠ d·ª•ng http client chung

const cartApi = {
  /**
   * ƒê·ªìng b·ªô gi·ªè h√†ng l√™n server.
   */
  async syncCartToServer(userId, items) {
    if (!userId) {
      console.warn('Kh√¥ng c√≥ userId, b·ªè qua ƒë·ªìng b·ªô gi·ªè h√†ng.')
      return
    }

    // üö® Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, ƒë√¢y th∆∞·ªùng l√† PUT/PATCH/POST ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng theo userId.
    // V·ªõi JSON Server, ta ch·ªâ POST/PUT/PATCH v√†o 1 endpoint chung.
    try {
      // Gi·∫£ l·∫≠p logic: t√¨m gi·ªè h√†ng c≈© v√† c·∫≠p nh·∫≠t (ho·∫∑c t·∫°o m·ªõi)
      // D√πng endpoint chung /carts cho JSON Server
      const { data: existingCarts } = await http.get(`/carts?userId=${userId}`)

      if (existingCarts.length > 0) {
        // C·∫≠p nh·∫≠t gi·ªè h√†ng ƒë√£ t·ªìn t·∫°i (PUT/PATCH)
        const cartId = existingCarts[0].id
        await http.patch(`/carts/${cartId}`, {
          items: items,
          updatedAt: new Date().toISOString(),
        })
      } else {
        // T·∫°o gi·ªè h√†ng m·ªõi (POST)
        await http.post('/carts', {
          userId,
          items: items,
          updatedAt: new Date().toISOString(),
        })
      }
    } catch (err) {
      console.error('‚ùå L·ªói ƒë·ªìng b·ªô gi·ªè h√†ng:', err)
      throw new Error('L·ªói ƒë·ªìng b·ªô gi·ªè h√†ng l√™n m√°y ch·ªß.')
    }
  },

  /**
   * T·∫£i gi·ªè h√†ng t·ª´ server.
   */
  async loadCartFromServer(userId) {
    if (!userId) return null

    try {
      // T·∫£i gi·ªè h√†ng c·ªßa user
      const { data } = await http.get(`/carts?userId=${userId}`)
      if (data.length > 0) {
        return data[0].items || []
      }
      return []
    } catch (err) {
      console.error('‚ùå L·ªói t·∫£i gi·ªè h√†ng:', err)
      throw new Error('L·ªói t·∫£i gi·ªè h√†ng t·ª´ m√°y ch·ªß.')
    }
  },
}

export default cartApi